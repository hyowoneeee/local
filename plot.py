# -*- coding: utf-8 -*-
"""plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A4ALFaKVCArFd2xWE1gIogsknu1uYkLs

#1. data collect
"""
import pandas as pd
import geopandas as gpd
from geopy.geocoders import Nominatim
import folium
import time
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
from bs4 import BeautifulSoup
import requests
from geopy.geocoders import Nominatim
import yfinance as yf

df = pd.read_csv('/content/tickers.csv')

df

# 종목 정보를 저장할 리스트
stock_info = []

# 각 티커에 대한 정보 추출
for ticker in df['Ticker']:
    try:
        stock = yf.Ticker(ticker)
        info = {
            'Ticker': ticker,
            'Name': stock.info.get('longName', 'N/A'),
            'Sector': stock.info.get('sector', 'N/A'),
            'MarketCap': stock.info.get('marketCap', 'N/A'),
        }
        stock_info.append(info)
    except:
        print(f"Error retrieving info for {ticker}")

# 추출한 정보를 데이터프레임으로 변환
info_df = pd.DataFrame(stock_info)

# 데이터프레임을 엑셀 파일로 저장
info_df.to_excel('/content/plot_data.xlsx', index=False)

info_df= pd.read_excel('/content/plot_data.xlsx')

info_df

"""#1. region,Latitude,Longitude"""

districts = {
    '1': ['Boston'],
    '2': ['New York'],
    '3': ['Philadelphia'],
    '4': ['Cleveland'],
    '5': ['Richmond'],
    '6': ['Atlanta'],
    '7': ['Chicago'],
    '8': ['St. Louis'],
    '9': ['Minneapolis'],
    '10': ['Kansas City'],
    '11': ['Dallas'],
    '12': ['San Francisco']
}

def get_district(city):
    for district, cities in districts.items():
        if city in cities:
            return district
    return 'N/A'

def get_ticker_info(ticker):
    try:
        info = yf.Ticker(ticker)
        address = info.info.get('address1', 'N/A')
        city = info.info.get('city', 'N/A')
        state = info.info.get('state', 'N/A')
        country = info.info.get('country', 'N/A')
        headquarters = f"{address}, {city}, {state}, {country}"

        if address != 'N/A' and city != 'N/A' and country != 'N/A':
            location_query = f"{address}, {city}, {country}"
            geolocator = Nominatim(user_agent="my_geocoder")
            location = geolocator.geocode(location_query)

            if location:
                latitude = location.latitude
                longitude = location.longitude
                district = get_district(city)
            else:
                latitude = None
                longitude = None
                district = 'N/A'
        else:
            latitude = None
            longitude = None
            district = 'N/A'

        return headquarters, latitude, longitude, district

    except Exception:
        headquarters = 'N/A'
        return headquarters, None, None, 'N/A'

# Get information for each ticker and update DataFrame

tickers_with_none_coordinates = []

for index, row in info_df.iterrows():
    ticker = row['Ticker']
    headquarters, latitude, longitude,district = get_ticker_info(ticker)

    info_df.at[index, 'Headquarters'] = headquarters
    info_df.at[index, 'Latitude'] = latitude
    info_df.at[index, 'Longitude'] = longitude
    info_df.at[index, 'District'] = district

    if latitude is None or longitude is None:
        tickers_with_none_coordinates.append(ticker)

    print(f"Ticker: {ticker}")
    print(f"Headquarters: {headquarters}")
    print(f"Latitude: {latitude}")
    print(f"Longitude: {longitude}")
    print(f"District: {district}")
    print("------------------------")

print(info_df)

"""#3. preprocessiong"""

info_df = info_df.dropna(subset=['Latitude', 'Longitude'])

info_df

info_df.to_excel('/content/plot_data.xlsx', index=False)

"""#3. map"""

# Create a map
us_map = folium.Map(location=[37.0902, -95.7129], zoom_start=4)

for index, row in info_df.iterrows():
    ticker = row['Ticker']
    name = row['Name']
    sector = row['Sector']
    market_cap = row['MarketCap']
    headquarters, latitude, longitude, district = get_ticker_info(ticker)

    if latitude is not None and longitude is not None:
        color = 'blue' if district != 'N/A' else 'red'
        popup_content = f"Ticker: {ticker}<br>Name: {name}<br>Sector: {sector}<br>Market Cap: {market_cap}<br>Headquarters: {headquarters}"

        folium.Marker(
            location=[latitude, longitude],
            popup=popup_content,
            icon=folium.Icon(color=color, icon="times")
        ).add_to(us_map)

us_map

def create_us_map():
    us_map = folium.Map(location=[37.0902, -95.7129], zoom_start=4)
    # Add markers, layers, etc. to the map
    return us_map

def main():
    us_map = create_us_map()

    # Save the map as an HTML file
    us_map.save("us_map.html")

if __name__ == "__main__":
    main()
